AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: RAGStack-Lambda - OCR to Bedrock Knowledge Base Pipeline

Parameters:
  ProjectName:
    Type: String
    Default: RAGStack
    Description: Project name prefix for resources

  OcrBackend:
    Type: String
    Default: textract
    AllowedValues:
      - textract
      - bedrock
    Description: OCR backend to use (textract or bedrock)

  BedrockOcrModelId:
    Type: String
    Default: anthropic.claude-3-5-haiku-20241022-v1:0
    Description: Bedrock model ID for OCR (if backend=bedrock)

  TextEmbedModelId:
    Type: String
    Default: amazon.titan-embed-text-v2:0
    Description: Bedrock model ID for text embeddings

  ImageEmbedModelId:
    Type: String
    Default: amazon.titan-embed-image-v1
    Description: Bedrock model ID for image embeddings

  AdminEmail:
    Type: String
    Description: Admin user email for Cognito (used in Phase 4)
    AllowedPattern: '^[\w.+-]+@([\w-]+\.)+[\w-]{2,6}$'
    ConstraintDescription: Must be a valid email address

Globals:
  Function:
    Runtime: python3.13
    Timeout: 900  # 15 minutes
    MemorySize: 2048
    Environment:
      Variables:
        LOG_LEVEL: INFO

Resources:
  # =========================================================================
  # S3 Buckets
  # =========================================================================

  InputBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: RetainExceptOnCreate
    Properties:
      BucketName: !Sub '${ProjectName}-input-${AWS::AccountId}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldUploads
            Status: Enabled
            ExpirationInDays: 90
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true

  OutputBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: RetainExceptOnCreate
    Properties:
      BucketName: !Sub '${ProjectName}-output-${AWS::AccountId}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: CleanupOldOutputs
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - HEAD
            AllowedOrigins:
              - '*'  # TODO Phase 6: Restrict to CloudFront distribution
            MaxAge: 3000

  WorkingBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: RetainExceptOnCreate
    Properties:
      BucketName: !Sub '${ProjectName}-working-${AWS::AccountId}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteWorkingFiles
            Status: Enabled
            ExpirationInDays: 7
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1

  VectorBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: RetainExceptOnCreate
    Properties:
      BucketName: !Sub '${ProjectName}-vectors-${AWS::AccountId}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: CleanupOldVectors
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true

  UIBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: RetainExceptOnCreate
    Properties:
      BucketName: !Sub '${ProjectName}-ui-${AWS::AccountId}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: false  # CloudFront needs access
        IgnorePublicAcls: true
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html

  # =========================================================================
  # DynamoDB Tables
  # =========================================================================

  TrackingTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: RetainExceptOnCreate
    Properties:
      TableName: !Sub '${ProjectName}-Tracking'
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      AttributeDefinitions:
        - AttributeName: document_id
          AttributeType: S
        - AttributeName: created_at
          AttributeType: S
      KeySchema:
        - AttributeName: document_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: CreatedAtIndex
          KeySchema:
            - AttributeName: created_at
              KeyType: HASH
            - AttributeName: document_id
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  MeteringTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: RetainExceptOnCreate
    Properties:
      TableName: !Sub '${ProjectName}-Metering'
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      AttributeDefinitions:
        - AttributeName: document_id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: document_id
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      TimeToLiveSpecification:
        Enabled: true
        AttributeName: ttl

  # =========================================================================
  # Lambda Functions
  # =========================================================================

  ProcessDocumentFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-ProcessDocument'
      CodeUri: src/lambda/process_document/
      Handler: index.lambda_handler
      Description: Process document - OCR and text extraction
      Runtime: python3.13
      Timeout: 900  # 15 minutes for large documents
      MemorySize: 3008  # Max memory for OCR processing
      Environment:
        Variables:
          LOG_LEVEL: INFO
          TRACKING_TABLE: !Ref TrackingTable
          METERING_TABLE: !Ref MeteringTable
          OUTPUT_BUCKET: !Ref OutputBucket
          WORKING_BUCKET: !Ref WorkingBucket
          OCR_BACKEND: !Ref OcrBackend
          BEDROCK_OCR_MODEL_ID: !Ref BedrockOcrModelId
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref InputBucket
        - S3CrudPolicy:
            BucketName: !Ref OutputBucket
        - S3CrudPolicy:
            BucketName: !Ref WorkingBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref TrackingTable
        - DynamoDBCrudPolicy:
            TableName: !Ref MeteringTable
        - Statement:
            - Effect: Allow
              Action:
                - textract:DetectDocumentText
                - textract:AnalyzeDocument
              Resource: '*'
            - Effect: Allow
              Action: bedrock:InvokeModel
              Resource:
                - !Sub 'arn:${AWS::Partition}:bedrock:${AWS::Region}::foundation-model/*'
                - !Sub 'arn:${AWS::Partition}:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/*'

  GenerateEmbeddingsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-GenerateEmbeddings'
      CodeUri: src/lambda/generate_embeddings/
      Handler: index.lambda_handler
      Description: Generate text and image embeddings
      Runtime: python3.13
      Timeout: 900
      MemorySize: 2048
      Environment:
        Variables:
          LOG_LEVEL: INFO
          TRACKING_TABLE: !Ref TrackingTable
          METERING_TABLE: !Ref MeteringTable
          VECTOR_BUCKET: !Ref VectorBucket
          TEXT_EMBED_MODEL: !Ref TextEmbedModelId
          IMAGE_EMBED_MODEL: !Ref ImageEmbedModelId
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref OutputBucket
        - S3CrudPolicy:
            BucketName: !Ref VectorBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref TrackingTable
        - DynamoDBCrudPolicy:
            TableName: !Ref MeteringTable
        - Statement:
            - Effect: Allow
              Action: bedrock:InvokeModel
              Resource:
                - !Sub 'arn:${AWS::Partition}:bedrock:${AWS::Region}::foundation-model/*'
                - !Sub 'arn:${AWS::Partition}:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/*'

  QueryKBFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-QueryKB'
      CodeUri: src/lambda/query_kb/
      Handler: index.lambda_handler
      Description: Query Bedrock Knowledge Base
      Runtime: python3.13
      Timeout: 60
      MemorySize: 512
      Environment:
        Variables:
          LOG_LEVEL: INFO
          KNOWLEDGE_BASE_ID: !GetAtt KnowledgeBase.KnowledgeBaseId
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - bedrock:Retrieve
                - bedrock:RetrieveAndGenerate
              Resource: !Sub 'arn:${AWS::Partition}:bedrock:${AWS::Region}:${AWS::AccountId}:knowledge-base/*'
            - Effect: Allow
              Action: bedrock:InvokeModel
              Resource:
                - !Sub 'arn:${AWS::Partition}:bedrock:${AWS::Region}::foundation-model/*'
                - !Sub 'arn:${AWS::Partition}:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/*'

  # =========================================================================
  # Step Functions State Machine
  # =========================================================================

  StateMachineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: InvokeLambdas
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt ProcessDocumentFunction.Arn
                  - !GetAtt GenerateEmbeddingsFunction.Arn
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogDelivery
                  - logs:GetLogDelivery
                  - logs:UpdateLogDelivery
                  - logs:DeleteLogDelivery
                  - logs:ListLogDeliveries
                  - logs:PutLogEvents
                  - logs:PutResourcePolicy
                  - logs:DescribeResourcePolicies
                  - logs:DescribeLogGroups
                Resource: '*'

  ProcessingStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub '${ProjectName}-ProcessingPipeline'
      DefinitionUri: src/statemachine/pipeline.asl.json
      DefinitionSubstitutions:
        ProcessDocumentFunctionArn: !GetAtt ProcessDocumentFunction.Arn
        GenerateEmbeddingsFunctionArn: !GetAtt GenerateEmbeddingsFunction.Arn
      Role: !GetAtt StateMachineExecutionRole.Arn
      Logging:
        Level: ALL
        IncludeExecutionData: true
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt StateMachineLogGroup.Arn

  StateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/vendedlogs/states/${ProjectName}-Pipeline'
      RetentionInDays: 30

  # =========================================================================
  # EventBridge Rule for S3 Upload Trigger
  # =========================================================================

  S3UploadRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${ProjectName}-S3UploadTrigger'
      Description: Trigger processing pipeline on S3 upload
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - Object Created
        detail:
          bucket:
            name:
              - !Ref InputBucket
      State: ENABLED
      Targets:
        - Arn: !GetAtt ProcessingStateMachine.Arn
          RoleArn: !GetAtt EventBridgeToStepFunctionsRole.Arn
          Id: TriggerProcessing
          InputTransformer:
            InputPathsMap:
              bucket: $.detail.bucket.name
              key: $.detail.object.key
            InputTemplate: !Sub |
              {
                "document_id": "<key>",
                "input_s3_uri": "s3://<bucket>/<key>",
                "output_s3_prefix": "s3://${OutputBucket}/<key>/",
                "vector_bucket": "${VectorBucket}",
                "ocr_backend": "${OcrBackend}",
                "bedrock_model_id": "${BedrockOcrModelId}"
              }
          RetryPolicy:
            MaximumRetryAttempts: 2

  EventBridgeToStepFunctionsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StartExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: !GetAtt ProcessingStateMachine.Arn

  # =========================================================================
  # Bedrock Knowledge Base
  # =========================================================================

  KnowledgeBaseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                'aws:SourceAccount': !Ref AWS::AccountId
              ArnLike:
                'aws:SourceArn': !Sub 'arn:${AWS::Partition}:bedrock:${AWS::Region}:${AWS::AccountId}:knowledge-base/*'
      Policies:
        - PolicyName: S3VectorsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                  - s3vectors:DescribeIndex
                  - s3vectors:ReadVectors
                  - s3vectors:WriteVectors
                Resource:
                  - !Sub '${VectorBucket.Arn}'
                  - !Sub '${VectorBucket.Arn}/*'
                  - !Sub 'arn:${AWS::Partition}:s3vectors:${AWS::Region}:${AWS::AccountId}:index/${VectorBucket}/*'
        - PolicyName: BedrockModelAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource: !Sub 'arn:${AWS::Partition}:bedrock:${AWS::Region}::foundation-model/${TextEmbedModelId}'

  KnowledgeBaseCustomResourceFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-KBCustomResource'
      CodeUri: src/lambda/kb_custom_resource/
      Handler: index.lambda_handler
      Description: Custom resource for Knowledge Base creation with S3 Vectors
      Runtime: python3.13
      Timeout: 300
      MemorySize: 512
      Environment:
        Variables:
          LOG_LEVEL: INFO
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - bedrock:CreateKnowledgeBase
                - bedrock:DeleteKnowledgeBase
                - bedrock:GetKnowledgeBase
                - bedrock:UpdateKnowledgeBase
                - bedrock:CreateDataSource
                - bedrock:DeleteDataSource
                - bedrock:GetDataSource
                - bedrock:ListDataSources
              Resource: '*'
            - Effect: Allow
              Action:
                - s3vectors:CreateIndex
                - s3vectors:DeleteIndex
                - s3vectors:DescribeIndex
                - s3vectors:ListIndices
              Resource: !Sub 'arn:${AWS::Partition}:s3vectors:${AWS::Region}:${AWS::AccountId}:index/${VectorBucket}/*'
            - Effect: Allow
              Action:
                - iam:PassRole
              Resource: !GetAtt KnowledgeBaseRole.Arn
            - Effect: Allow
              Action:
                - ssm:PutParameter
                - ssm:DeleteParameter
                - ssm:GetParameter
              Resource: !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ProjectName}/KnowledgeBaseId'

  KnowledgeBase:
    Type: Custom::KnowledgeBase
    Properties:
      ServiceToken: !GetAtt KnowledgeBaseCustomResourceFunction.Arn
      KnowledgeBaseName: !Sub '${ProjectName}-KB'
      RoleArn: !GetAtt KnowledgeBaseRole.Arn
      VectorBucket: !Ref VectorBucket
      EmbedModelArn: !Sub 'arn:${AWS::Partition}:bedrock:${AWS::Region}::foundation-model/${TextEmbedModelId}'
      IndexName: !Sub '${ProjectName}-vector-index'
      Region: !Ref AWS::Region
      ProjectName: !Ref ProjectName

  # =========================================================================
  # Cognito Authentication
  # =========================================================================

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub '${ProjectName}-Users'
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Schema:
        - Name: email
          Required: true
          Mutable: false
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
      MfaConfiguration: OPTIONAL
      EnabledMfas:
        - SOFTWARE_TOKEN_MFA
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub '${ProjectName}-WebClient'
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      PreventUserExistenceErrors: ENABLED
      RefreshTokenValidity: 30  # Days
      AccessTokenValidity: 60   # Minutes
      IdTokenValidity: 60       # Minutes

  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub '${ProjectName}Identity'
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName

  IdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt AuthenticatedRole.Arn

  AuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref IdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: authenticated
      Policies:
        - PolicyName: AuthenticatedAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource:
                  - !Sub '${InputBucket.Arn}/*'
                  - !Sub '${OutputBucket.Arn}/*'
              - Effect: Allow
                Action:
                  - appsync:GraphQL
                Resource: '*'  # Will be restricted after GraphQLApi is created

  AdminUser:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      UserPoolId: !Ref UserPool
      Username: !Ref AdminEmail
      UserAttributes:
        - Name: email
          Value: !Ref AdminEmail
        - Name: email_verified
          Value: 'true'
      DesiredDeliveryMediums:
        - EMAIL

Outputs:
  # S3 Buckets
  InputBucketName:
    Description: S3 bucket for document uploads
    Value: !Ref InputBucket
    Export:
      Name: !Sub '${AWS::StackName}-InputBucket'

  OutputBucketName:
    Description: S3 bucket for processed documents
    Value: !Ref OutputBucket
    Export:
      Name: !Sub '${AWS::StackName}-OutputBucket'

  WorkingBucketName:
    Description: S3 bucket for temporary working files
    Value: !Ref WorkingBucket
    Export:
      Name: !Sub '${AWS::StackName}-WorkingBucket'

  VectorBucketName:
    Description: S3 bucket for embeddings and vectors
    Value: !Ref VectorBucket
    Export:
      Name: !Sub '${AWS::StackName}-VectorBucket'

  UIBucketName:
    Description: S3 bucket for WebUI hosting
    Value: !Ref UIBucket
    Export:
      Name: !Sub '${AWS::StackName}-UIBucket'

  # DynamoDB Tables
  TrackingTableName:
    Description: DynamoDB table for document tracking
    Value: !Ref TrackingTable
    Export:
      Name: !Sub '${AWS::StackName}-TrackingTable'

  MeteringTableName:
    Description: DynamoDB table for usage metering
    Value: !Ref MeteringTable
    Export:
      Name: !Sub '${AWS::StackName}-MeteringTable'

  # Lambda Functions
  ProcessDocumentFunctionArn:
    Description: Process document Lambda ARN
    Value: !GetAtt ProcessDocumentFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ProcessDocumentFunction'

  GenerateEmbeddingsFunctionArn:
    Description: Generate embeddings Lambda ARN
    Value: !GetAtt GenerateEmbeddingsFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-GenerateEmbeddingsFunction'

  QueryKBFunctionArn:
    Description: Query Knowledge Base Lambda ARN
    Value: !GetAtt QueryKBFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-QueryKBFunction'

  # Step Functions
  StateMachineArn:
    Description: Step Functions state machine ARN
    Value: !GetAtt ProcessingStateMachine.Arn
    Export:
      Name: !Sub '${AWS::StackName}-StateMachine'

  # Knowledge Base
  KnowledgeBaseId:
    Description: Bedrock Knowledge Base ID
    Value: !GetAtt KnowledgeBase.KnowledgeBaseId
    Export:
      Name: !Sub '${AWS::StackName}-KnowledgeBaseId'

  KnowledgeBaseArn:
    Description: Bedrock Knowledge Base ARN
    Value: !GetAtt KnowledgeBase.KnowledgeBaseArn
    Export:
      Name: !Sub '${AWS::StackName}-KnowledgeBaseArn'

  DataSourceId:
    Description: Bedrock Knowledge Base Data Source ID
    Value: !GetAtt KnowledgeBase.DataSourceId
    Export:
      Name: !Sub '${AWS::StackName}-DataSourceId'

  # Configuration
  Region:
    Description: AWS Region
    Value: !Ref AWS::Region

  StackName:
    Description: CloudFormation Stack Name
    Value: !Ref AWS::StackName
