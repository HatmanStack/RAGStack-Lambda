# Example GitHub Actions Workflow for Local Testing
# Location: .github/workflows/test.yml
#
# This workflow runs the unified local testing commands on every push and pull request.
# Copy this file to .github/workflows/test.yml to enable CI/CD testing.

name: Test

on:
  push:
    branches: [ main, develop, fix-deploy ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Run Tests and Linting
    runs-on: ubuntu-latest

    strategy:
      matrix:
        # Test on multiple Python versions if needed
        python-version: ['3.13']
        node-version: ['22']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Python setup
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Add uv to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Install Python dependencies
        run: |
          uv pip install --system -r requirements-dev.txt

      # Node.js setup
      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: |
            src/ui/node_modules
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Node dependencies
        run: |
          npm install
          cd src/ui && npm install && cd ../..

      # Run tests
      - name: Lint backend (ruff)
        run: npm run lint:backend

      - name: Lint frontend (ESLint)
        run: npm run lint:frontend

      - name: Run backend tests (pytest)
        run: npm run test:backend

      - name: Run frontend tests (Vitest)
        run: npm run test:frontend

      # Optional: Generate coverage reports
      - name: Generate coverage report
        run: npm run test:backend:coverage
        continue-on-error: true

      # Optional: Upload coverage to codecov
      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v3
      #   with:
      #     file: ./coverage.xml
      #     flags: backend
      #     name: codecov-umbrella

      # Optional: Comment on PR with test results
      # - name: Comment PR
      #   if: github.event_name == 'pull_request'
      #   uses: actions/github-script@v6
      #   with:
      #     script: |
      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: 'âœ… All tests passed!'
      #       })

  # Optional: Separate job for integration tests (requires AWS credentials)
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test  # Only run if unit tests pass
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      # Configure AWS credentials (use GitHub Secrets)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Run integration tests
        run: npm run test:backend:integration
        env:
          STACK_NAME: RAGStack-test

# Badge Generation
# Add these badges to README.md:
#
# [![Test](https://github.com/USERNAME/RAGStack-Lambda/actions/workflows/test.yml/badge.svg)](https://github.com/USERNAME/RAGStack-Lambda/actions/workflows/test.yml)
# [![codecov](https://codecov.io/gh/USERNAME/RAGStack-Lambda/branch/main/graph/badge.svg)](https://codecov.io/gh/USERNAME/RAGStack-Lambda)
