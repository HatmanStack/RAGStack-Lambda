
> ragstack-lambda@1.0.0 test:backend
> uv run pytest tests/unit/ -m 'not integration'; uv run pytest lib/ragstack_common/

============================= test session starts ==============================
platform linux -- Python 3.13.9, pytest-8.4.2, pluggy-1.6.0
rootdir: /root/RAGStack-Lambda/.worktrees/fix-tests
configfile: pytest.ini
plugins: cov-5.0.0
collected 95 items

tests/unit/test_configuration_resolver.py FFEFFFFFFFFFFFFFFFFFFF         [ 23%]
tests/unit/test_generate_embeddings.py FFFFFFFF                          [ 31%]
tests/unit/test_prerequisites.py .............                           [ 45%]
tests/unit/test_process_document.py FFFFFFF                              [ 52%]
tests/unit/test_publish_args.py .....                                    [ 57%]
tests/unit/test_query_kb.py ...........                                  [ 69%]
tests/unit/test_ragstack_common_install.py ................              [ 86%]
tests/unit/test_validation.py .............                              [100%]

==================================== ERRORS ====================================
_________ ERROR at setup of test_lambda_handler_unsupported_operation __________
file /root/RAGStack-Lambda/.worktrees/fix-tests/tests/unit/test_configuration_resolver.py, line 155
  def test_lambda_handler_unsupported_operation(_mock_dynamodb):
E       fixture '_mock_dynamodb' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, cov, doctest_namespace, mock_configuration_table, mock_dynamodb, mock_env_vars, mock_tracking_table, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_custom, sample_default, sample_schema, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/root/RAGStack-Lambda/.worktrees/fix-tests/tests/unit/test_configuration_resolver.py:155
=================================== FAILURES ===================================
____________________ test_lambda_handler_get_configuration _____________________

mock_dynamodb = {'configuration_table': <MagicMock id='140136449456656'>, 'tracking_table': <MagicMock id='140136438760512'>}
sample_schema = {'Configuration': 'Schema', 'Schema': {'properties': {'ocr_backend': {'enum': ['textract', 'bedrock'], 'type': 'string'}}}}
sample_default = {'Configuration': 'Default', 'ocr_backend': 'textract', 'text_embed_model_id': 'amazon.titan-embed-text-v2:0'}
sample_custom = {'Configuration': 'Custom', 'ocr_backend': 'bedrock'}

    def test_lambda_handler_get_configuration(
        mock_dynamodb, sample_schema, sample_default, sample_custom
    ):
        """Test lambda_handler routes getConfiguration correctly."""
        mock_table = mock_dynamodb["configuration_table"]
    
        def get_item_side_effect(Key):
            config_type = Key["Configuration"]
            if config_type == "Schema":
                return {"Item": sample_schema}
            if config_type == "Default":
                return {"Item": sample_default}
            if config_type == "Custom":
                return {"Item": sample_custom}
            return {}
    
        mock_table.get_item.side_effect = get_item_side_effect
    
        event = {"info": {"fieldName": "getConfiguration"}, "arguments": {}}
    
        result = index.lambda_handler(event, {})
    
>       assert "Schema" in result
E       AssertionError: assert 'Schema' in {'message': 'No query provided', 'results': []}

tests/unit/test_configuration_resolver.py:135: AssertionError
------------------------------ Captured log call -------------------------------
INFO     botocore.credentials:credentials.py:1364 Found credentials in shared credentials file: ~/.aws/credentials
INFO     root:index.py:65 Querying Knowledge Base: {"query_length": 0, "has_max_results": false, "knowledge_base_id": "test-kb-..."}
INFO     root:index.py:66 Using response model: <MagicMock name='mock.ConfigurationManager().get_parameter()' id='140136438763200'>
___________________ test_lambda_handler_update_configuration ___________________

mock_dynamodb = {'configuration_table': <MagicMock id='140136449444896'>, 'tracking_table': <MagicMock id='140136438517776'>}

    def test_lambda_handler_update_configuration(mock_dynamodb):
        """Test lambda_handler routes updateConfiguration correctly."""
        mock_table = mock_dynamodb["configuration_table"]
    
        event = {
            "info": {"fieldName": "updateConfiguration"},
            "arguments": {"customConfig": json.dumps({"ocr_backend": "bedrock"})},
        }
    
        result = index.lambda_handler(event, {})
    
>       assert result is True
E       AssertionError: assert {'message': 'No query provided', 'results': []} is True

tests/unit/test_configuration_resolver.py:151: AssertionError
------------------------------ Captured log call -------------------------------
INFO     root:index.py:65 Querying Knowledge Base: {"query_length": 0, "has_max_results": false, "knowledge_base_id": "test-kb-..."}
INFO     root:index.py:66 Using response model: <MagicMock name='mock.ConfigurationManager().get_parameter()' id='140136438763200'>
____________________ test_handle_get_configuration_success _____________________

args = ()
keywargs = {'sample_custom': {'Configuration': 'Custom', 'ocr_backend': 'bedrock'}, 'sample_default': {'Configuration': 'Default'...figuration': 'Schema', 'Schema': {'properties': {'ocr_backend': {'enum': ['textract', 'bedrock'], 'type': 'string'}}}}}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1423: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:141: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1405: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:530: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f740ee69bd0>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'index' from '/root/RAGStack-Lambda/.worktrees/fix-tests/src/lambda/query_kb/index.py'> does not have the attribute 'get_configuration_item'

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1467: AttributeError
__________________ test_handle_get_configuration_empty_custom __________________

args = ()
keywargs = {'sample_default': {'Configuration': 'Default', 'ocr_backend': 'textract', 'text_embed_model_id': 'amazon.titan-embed-...figuration': 'Schema', 'Schema': {'properties': {'ocr_backend': {'enum': ['textract', 'bedrock'], 'type': 'string'}}}}}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1423: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:141: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1405: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:530: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f740ee26c40>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'index' from '/root/RAGStack-Lambda/.worktrees/fix-tests/src/lambda/query_kb/index.py'> does not have the attribute 'get_configuration_item'

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1467: AttributeError
______________ test_handle_update_configuration_with_json_string _______________

args = (), keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1423: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:141: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1405: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:530: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f740ee26d70>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'index' from '/root/RAGStack-Lambda/.worktrees/fix-tests/src/lambda/query_kb/index.py'> does not have the attribute 'configuration_table'

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1467: AttributeError
__________________ test_handle_update_configuration_with_dict __________________

args = (), keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1423: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:141: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1405: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:530: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f740ecbccb0>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'index' from '/root/RAGStack-Lambda/.worktrees/fix-tests/src/lambda/query_kb/index.py'> does not have the attribute 'configuration_table'

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1467: AttributeError
________________ test_handle_update_configuration_invalid_json _________________

    def test_handle_update_configuration_invalid_json():
        """Test updating configuration with invalid JSON."""
        with pytest.raises(ValueError, match="Invalid configuration format"):
>           index.handle_update_configuration("invalid json {")
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           AttributeError: module 'index' has no attribute 'handle_update_configuration'

tests/unit/test_configuration_resolver.py:253: AttributeError
____________________ test_handle_get_document_count_success ____________________

args = (), keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1423: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:141: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1405: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:530: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f740ee17240>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'index' from '/root/RAGStack-Lambda/.worktrees/fix-tests/src/lambda/query_kb/index.py'> does not have the attribute 'tracking_table'

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1467: AttributeError
_____________________ test_handle_get_document_count_zero ______________________

args = (), keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1423: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:141: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1405: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:530: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f740ee17350>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'index' from '/root/RAGStack-Lambda/.worktrees/fix-tests/src/lambda/query_kb/index.py'> does not have the attribute 'tracking_table'

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1467: AttributeError
________________ test_handle_get_document_count_dynamodb_error _________________

args = (), keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1423: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:141: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1405: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:530: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f740edd7d50>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'index' from '/root/RAGStack-Lambda/.worktrees/fix-tests/src/lambda/query_kb/index.py'> does not have the attribute 'tracking_table'

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1467: AttributeError
__________________________ test_remove_partition_key ___________________________

    def test_remove_partition_key():
        """Test partition key removal."""
        item = {"Configuration": "Default", "key1": "value1", "key2": "value2"}
    
>       result = index.remove_partition_key(item)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: module 'index' has no attribute 'remove_partition_key'

tests/unit/test_configuration_resolver.py:300: AttributeError
________________________ test_remove_partition_key_none ________________________

    def test_remove_partition_key_none():
        """Test partition key removal with None."""
>       result = index.remove_partition_key(None)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: module 'index' has no attribute 'remove_partition_key'

tests/unit/test_configuration_resolver.py:309: AttributeError
___________________ test_query_completed_documents_using_gsi ___________________

args = (), keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1423: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:141: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1405: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:530: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f740edd7e50>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'index' from '/root/RAGStack-Lambda/.worktrees/fix-tests/src/lambda/query_kb/index.py'> does not have the attribute 'tracking_table'

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1467: AttributeError
________________ test_query_completed_documents_with_pagination ________________

args = (), keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1423: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:141: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1405: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:530: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f740ee0f4d0>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'index' from '/root/RAGStack-Lambda/.worktrees/fix-tests/src/lambda/query_kb/index.py'> does not have the attribute 'tracking_table'

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1467: AttributeError
_______________ test_query_completed_documents_fallback_to_scan ________________

args = (), keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1423: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:141: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1405: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:530: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f740ecb46e0>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'index' from '/root/RAGStack-Lambda/.worktrees/fix-tests/src/lambda/query_kb/index.py'> does not have the attribute 'tracking_table'

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1467: AttributeError
__________________ test_handle_re_embed_all_documents_success __________________

args = (), keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1423: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:141: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1405: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:530: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f740ee07690>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'index' from '/root/RAGStack-Lambda/.worktrees/fix-tests/src/lambda/query_kb/index.py'> does not have the attribute 'configuration_table'

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1467: AttributeError
_______________ test_handle_re_embed_all_documents_no_documents ________________

args = (), keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1423: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:141: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1405: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:530: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f740ee07930>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'index' from '/root/RAGStack-Lambda/.worktrees/fix-tests/src/lambda/query_kb/index.py'> does not have the attribute 'configuration_table'

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1467: AttributeError
______________ test_handle_re_embed_all_documents_enforces_limit _______________

args = (), keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1423: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:141: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1405: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:530: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f740ee07bd0>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'index' from '/root/RAGStack-Lambda/.worktrees/fix-tests/src/lambda/query_kb/index.py'> does not have the attribute 'configuration_table'

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1467: AttributeError
_________________ test_handle_get_re_embed_job_status_success __________________

args = (), keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1423: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:141: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1405: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:530: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f740ee07cb0>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'index' from '/root/RAGStack-Lambda/.worktrees/fix-tests/src/lambda/query_kb/index.py'> does not have the attribute 'configuration_table'

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1467: AttributeError
__________________ test_handle_get_re_embed_job_status_no_job __________________

args = (), keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1423: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:141: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1405: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:530: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f740ee07d90>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'index' from '/root/RAGStack-Lambda/.worktrees/fix-tests/src/lambda/query_kb/index.py'> does not have the attribute 'configuration_table'

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1467: AttributeError
________________ test_handle_get_re_embed_job_status_completed _________________

args = (), keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1423: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:141: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1405: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:530: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f740ee07e70>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'index' from '/root/RAGStack-Lambda/.worktrees/fix-tests/src/lambda/query_kb/index.py'> does not have the attribute 'configuration_table'

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1467: AttributeError
_________________________ test_lambda_handler_success __________________________

args = ()
kw = {'lambda_context': <Mock id='140136449456656'>, 'valid_event': {'document_id': 'test-doc-123', 'output_s3_uri': 's3://...mage_s3_uri': 's3://output-bucket/test-doc-123/page_2.jpg', 'page_number': 2}], 'vector_bucket': 'test-vector-bucket'}}

    @wraps(f)
    def _inner(*args, **kw):
        self._patch_dict()
        try:
>           return f(*args, **kw)
                   ^^^^^^^^^^^^^^

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1891: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1423: in patched
    with self.decoration_helper(patched,
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:141: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1405: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:530: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f740ecea890>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'index' from '/root/RAGStack-Lambda/.worktrees/fix-tests/src/lambda/query_kb/index.py'> does not have the attribute 'BedrockClient'

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1467: AttributeError
________________________ test_lambda_handler_text_only _________________________

args = (), kw = {'lambda_context': <Mock id='140136449444896'>}

    @wraps(f)
    def _inner(*args, **kw):
        self._patch_dict()
        try:
>           return f(*args, **kw)
                   ^^^^^^^^^^^^^^

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1891: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1423: in patched
    with self.decoration_helper(patched,
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:141: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1405: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:530: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f740ecea190>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'index' from '/root/RAGStack-Lambda/.worktrees/fix-tests/src/lambda/query_kb/index.py'> does not have the attribute 'BedrockClient'

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1467: AttributeError
_____________________ test_lambda_handler_text_truncation ______________________

args = (), kw = {'lambda_context': <Mock id='140136438760512'>}

    @wraps(f)
    def _inner(*args, **kw):
        self._patch_dict()
        try:
>           return f(*args, **kw)
                   ^^^^^^^^^^^^^^

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1891: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1423: in patched
    with self.decoration_helper(patched,
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:141: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1405: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:530: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f740ece9c50>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'index' from '/root/RAGStack-Lambda/.worktrees/fix-tests/src/lambda/query_kb/index.py'> does not have the attribute 'BedrockClient'

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1467: AttributeError
_____________________ test_lambda_handler_bedrock_failure ______________________

args = ()
kw = {'lambda_context': <Mock id='140136438761184'>, 'valid_event': {'document_id': 'test-doc-123', 'output_s3_uri': 's3://...mage_s3_uri': 's3://output-bucket/test-doc-123/page_2.jpg', 'page_number': 2}], 'vector_bucket': 'test-vector-bucket'}}

    @wraps(f)
    def _inner(*args, **kw):
        self._patch_dict()
        try:
>           return f(*args, **kw)
                   ^^^^^^^^^^^^^^

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1891: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1423: in patched
    with self.decoration_helper(patched,
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:141: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1405: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:530: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f740ece9710>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'index' from '/root/RAGStack-Lambda/.worktrees/fix-tests/src/lambda/query_kb/index.py'> does not have the attribute 'BedrockClient'

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1467: AttributeError
________________ test_lambda_handler_skip_pages_without_images _________________

args = (), kw = {'lambda_context': <Mock id='140136438760848'>}

    @wraps(f)
    def _inner(*args, **kw):
        self._patch_dict()
        try:
>           return f(*args, **kw)
                   ^^^^^^^^^^^^^^

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1891: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1423: in patched
    with self.decoration_helper(patched,
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:141: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1405: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:530: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f740ece8e50>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'index' from '/root/RAGStack-Lambda/.worktrees/fix-tests/src/lambda/query_kb/index.py'> does not have the attribute 'BedrockClient'

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1467: AttributeError
_________________ test_lambda_handler_missing_required_fields __________________

lambda_context = <Mock id='140136438761520'>

    @patch.dict(
        "os.environ",
        {"TRACKING_TABLE": "test-tracking-table", "TEXT_EMBED_MODEL": "amazon.titan-embed-text-v2:0"},
    )
    def test_lambda_handler_missing_required_fields(lambda_context):
        """Test handling of missing required event fields."""
    
        invalid_event = {
            "document_id": "test-doc-123"
            # Missing output_s3_uri and vector_bucket
        }
    
        # Execute and expect exception
>       with pytest.raises(KeyError):
             ^^^^^^^^^^^^^^^^^^^^^^^
E       Failed: DID NOT RAISE <class 'KeyError'>

tests/unit/test_generate_embeddings.py:304: Failed
------------------------------ Captured log call -------------------------------
INFO     root:index.py:65 Querying Knowledge Base: {"query_length": 0, "has_max_results": false, "knowledge_base_id": "test-kb-..."}
INFO     root:index.py:66 Using response model: <MagicMock name='mock.ConfigurationManager().get_parameter()' id='140136438763200'>
___________________ test_lambda_handler_uses_runtime_config ____________________

args = ()
kw = {'lambda_context': <Mock id='140136438762528'>, 'valid_event': {'document_id': 'test-doc-123', 'output_s3_uri': 's3://...mage_s3_uri': 's3://output-bucket/test-doc-123/page_2.jpg', 'page_number': 2}], 'vector_bucket': 'test-vector-bucket'}}

    @wraps(f)
    def _inner(*args, **kw):
        self._patch_dict()
        try:
>           return f(*args, **kw)
                   ^^^^^^^^^^^^^^

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1891: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1423: in patched
    with self.decoration_helper(patched,
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:141: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1405: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:530: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f740eceb150>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'index' from '/root/RAGStack-Lambda/.worktrees/fix-tests/src/lambda/query_kb/index.py'> does not have the attribute 'BedrockClient'

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1467: AttributeError
_____________ test_lambda_handler_uses_default_models_from_config ______________

args = (), kw = {'lambda_context': <Mock id='140136443063872'>}

    @wraps(f)
    def _inner(*args, **kw):
        self._patch_dict()
        try:
>           return f(*args, **kw)
                   ^^^^^^^^^^^^^^

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1891: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1423: in patched
    with self.decoration_helper(patched,
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:141: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1405: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:530: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f740eceb690>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'index' from '/root/RAGStack-Lambda/.worktrees/fix-tests/src/lambda/query_kb/index.py'> does not have the attribute 'BedrockClient'

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1467: AttributeError
_________________________ test_lambda_handler_success __________________________

args = ()
kw = {'lambda_context': <Mock id='140136438524496'>, 'mock_document': <Mock id='140136449444896'>, 'valid_event': {'documen... 'test-doc-123', 'filename': 'test.pdf', 'input_s3_uri': 's3://input-bucket/test.pdf', 'ocr_backend': 'textract', ...}}

    @wraps(f)
    def _inner(*args, **kw):
        self._patch_dict()
        try:
>           return f(*args, **kw)
                   ^^^^^^^^^^^^^^

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1891: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1423: in patched
    with self.decoration_helper(patched,
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:141: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1405: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:530: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f740ecebcb0>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'index' from '/root/RAGStack-Lambda/.worktrees/fix-tests/src/lambda/query_kb/index.py'> does not have the attribute 'Document'

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1467: AttributeError
_______________________ test_lambda_handler_ocr_failure ________________________

args = ()
kw = {'lambda_context': <Mock id='140136438761520'>, 'valid_event': {'document_id': 'test-doc-123', 'filename': 'test.pdf', 'input_s3_uri': 's3://input-bucket/test.pdf', 'ocr_backend': 'textract', ...}}

    @wraps(f)
    def _inner(*args, **kw):
        self._patch_dict()
        try:
>           return f(*args, **kw)
                   ^^^^^^^^^^^^^^

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1891: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1423: in patched
    with self.decoration_helper(patched,
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:141: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1405: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:530: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f740ed265f0>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'index' from '/root/RAGStack-Lambda/.worktrees/fix-tests/src/lambda/query_kb/index.py'> does not have the attribute 'Document'

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1467: AttributeError
__________________ test_lambda_handler_missing_required_field __________________

args = (), kw = {'lambda_context': <Mock id='140136443059840'>}

    @wraps(f)
    def _inner(*args, **kw):
        self._patch_dict()
        try:
>           return f(*args, **kw)
                   ^^^^^^^^^^^^^^

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1891: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1423: in patched
    with self.decoration_helper(patched,
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:141: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1405: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:530: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f740ed26430>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'index' from '/root/RAGStack-Lambda/.worktrees/fix-tests/src/lambda/query_kb/index.py'> does not have the attribute 'update_item'

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1467: AttributeError
___________________ test_lambda_handler_with_bedrock_backend ___________________

args = ()
kw = {'lambda_context': <Mock id='140136438760848'>, 'mock_document': <Mock id='140136438762528'>}

    @wraps(f)
    def _inner(*args, **kw):
        self._patch_dict()
        try:
>           return f(*args, **kw)
                   ^^^^^^^^^^^^^^

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1891: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1423: in patched
    with self.decoration_helper(patched,
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:141: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1405: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:530: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f740ed25ef0>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'index' from '/root/RAGStack-Lambda/.worktrees/fix-tests/src/lambda/query_kb/index.py'> does not have the attribute 'Document'

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1467: AttributeError
___________________ test_lambda_handler_page_text_truncation ___________________

args = ()
kw = {'lambda_context': <Mock id='140136438529200'>, 'valid_event': {'document_id': 'test-doc-123', 'filename': 'test.pdf', 'input_s3_uri': 's3://input-bucket/test.pdf', 'ocr_backend': 'textract', ...}}

    @wraps(f)
    def _inner(*args, **kw):
        self._patch_dict()
        try:
>           return f(*args, **kw)
                   ^^^^^^^^^^^^^^

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1891: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1423: in patched
    with self.decoration_helper(patched,
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:141: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1405: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:530: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f740ed257f0>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'index' from '/root/RAGStack-Lambda/.worktrees/fix-tests/src/lambda/query_kb/index.py'> does not have the attribute 'Document'

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1467: AttributeError
___________________ test_lambda_handler_uses_runtime_config ____________________

args = ()
kw = {'lambda_context': <Mock id='140136443059840'>, 'mock_document': <Mock id='140136449444896'>}

    @wraps(f)
    def _inner(*args, **kw):
        self._patch_dict()
        try:
>           return f(*args, **kw)
                   ^^^^^^^^^^^^^^

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1891: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1423: in patched
    with self.decoration_helper(patched,
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:141: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1405: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:530: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f740ed242f0>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'index' from '/root/RAGStack-Lambda/.worktrees/fix-tests/src/lambda/query_kb/index.py'> does not have the attribute 'Document'

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1467: AttributeError
________________ test_lambda_handler_uses_textract_from_config _________________

args = ()
kw = {'lambda_context': <Mock id='140136438761184'>, 'mock_document': <Mock id='140136438761520'>}

    @wraps(f)
    def _inner(*args, **kw):
        self._patch_dict()
        try:
>           return f(*args, **kw)
                   ^^^^^^^^^^^^^^

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1891: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1423: in patched
    with self.decoration_helper(patched,
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:141: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1405: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/contextlib.py:530: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f740ed26c10>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'index' from '/root/RAGStack-Lambda/.worktrees/fix-tests/src/lambda/query_kb/index.py'> does not have the attribute 'Document'

/root/.local/share/uv/python/cpython-3.13.9-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:1467: AttributeError
=========================== short test summary info ============================
FAILED tests/unit/test_configuration_resolver.py::test_lambda_handler_get_configuration
FAILED tests/unit/test_configuration_resolver.py::test_lambda_handler_update_configuration
FAILED tests/unit/test_configuration_resolver.py::test_handle_get_configuration_success
FAILED tests/unit/test_configuration_resolver.py::test_handle_get_configuration_empty_custom
FAILED tests/unit/test_configuration_resolver.py::test_handle_update_configuration_with_json_string
FAILED tests/unit/test_configuration_resolver.py::test_handle_update_configuration_with_dict
FAILED tests/unit/test_configuration_resolver.py::test_handle_update_configuration_invalid_json
FAILED tests/unit/test_configuration_resolver.py::test_handle_get_document_count_success
FAILED tests/unit/test_configuration_resolver.py::test_handle_get_document_count_zero
FAILED tests/unit/test_configuration_resolver.py::test_handle_get_document_count_dynamodb_error
FAILED tests/unit/test_configuration_resolver.py::test_remove_partition_key
FAILED tests/unit/test_configuration_resolver.py::test_remove_partition_key_none
FAILED tests/unit/test_configuration_resolver.py::test_query_completed_documents_using_gsi
FAILED tests/unit/test_configuration_resolver.py::test_query_completed_documents_with_pagination
FAILED tests/unit/test_configuration_resolver.py::test_query_completed_documents_fallback_to_scan
FAILED tests/unit/test_configuration_resolver.py::test_handle_re_embed_all_documents_success
FAILED tests/unit/test_configuration_resolver.py::test_handle_re_embed_all_documents_no_documents
FAILED tests/unit/test_configuration_resolver.py::test_handle_re_embed_all_documents_enforces_limit
FAILED tests/unit/test_configuration_resolver.py::test_handle_get_re_embed_job_status_success
FAILED tests/unit/test_configuration_resolver.py::test_handle_get_re_embed_job_status_no_job
FAILED tests/unit/test_configuration_resolver.py::test_handle_get_re_embed_job_status_completed
FAILED tests/unit/test_generate_embeddings.py::test_lambda_handler_success - ...
FAILED tests/unit/test_generate_embeddings.py::test_lambda_handler_text_only
FAILED tests/unit/test_generate_embeddings.py::test_lambda_handler_text_truncation
FAILED tests/unit/test_generate_embeddings.py::test_lambda_handler_bedrock_failure
FAILED tests/unit/test_generate_embeddings.py::test_lambda_handler_skip_pages_without_images
FAILED tests/unit/test_generate_embeddings.py::test_lambda_handler_missing_required_fields
FAILED tests/unit/test_generate_embeddings.py::test_lambda_handler_uses_runtime_config
FAILED tests/unit/test_generate_embeddings.py::test_lambda_handler_uses_default_models_from_config
FAILED tests/unit/test_process_document.py::test_lambda_handler_success - Att...
FAILED tests/unit/test_process_document.py::test_lambda_handler_ocr_failure
FAILED tests/unit/test_process_document.py::test_lambda_handler_missing_required_field
FAILED tests/unit/test_process_document.py::test_lambda_handler_with_bedrock_backend
FAILED tests/unit/test_process_document.py::test_lambda_handler_page_text_truncation
FAILED tests/unit/test_process_document.py::test_lambda_handler_uses_runtime_config
FAILED tests/unit/test_process_document.py::test_lambda_handler_uses_textract_from_config
ERROR tests/unit/test_configuration_resolver.py::test_lambda_handler_unsupported_operation
==================== 36 failed, 58 passed, 1 error in 3.76s ====================
============================= test session starts ==============================
platform linux -- Python 3.13.9, pytest-8.4.2, pluggy-1.6.0
rootdir: /root/RAGStack-Lambda/.worktrees/fix-tests
configfile: pytest.ini
plugins: cov-5.0.0
collected 30 items

lib/ragstack_common/test_bedrock.py ...                                  [ 10%]
lib/ragstack_common/test_config.py ...................                   [ 73%]
lib/ragstack_common/test_image.py ..                                     [ 80%]
lib/ragstack_common/test_models.py ..                                    [ 86%]
lib/ragstack_common/test_ocr.py ..                                       [ 93%]
lib/ragstack_common/test_storage.py ..                                   [100%]

============================== 30 passed in 0.54s ==============================
